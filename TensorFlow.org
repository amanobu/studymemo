- install
  - CPU版
    - pip install tensorflow
  - GPU版
    - pip install tensorflow-gpu
- 最初のプログラム
  - import tensorflow as tf
  - hello = tf.constant('Hello.TensorFlow')
  - sess = tf.Session()
  - print(sess.run(hello))
- 処理の流れ
  - TensorFlowの読み込み
  - 式を立てる：モデルを構築？
  - セッション開始
  - 実行
- 多次元行列：Tensor
- MINISTをやる
  - SoftMAX
    - すべて足すと１になるように計算する関数
    - こんな関数をTensorFlowはたくさん定義されている
  - クロスエントロピー
    - 正解との差を表現するために
  - y  = softmax(W・x + b)
    - W:重み
    - x:濃淡情報
    - b:バイアス
    - y:答え
  - グラフ：Tensorのデータの流れの事を指している
    - ｘ
    - w
    - →MatMul(W・x)
    - b
    - →Matmul(W・x) + b
    - →SoftMAX
    - ↑こんな感じで流れるから
  - コード
    - import tensorflow as tf
    - x = tf.placeholder(tf.float32,[None,784])
      -0/1で32桁、初期値なしで、784個のデータ
    - W = tf.Variable(tf.zeros([784,10])) #Variable:変数,初期値0
    - b = tf.Variable(tf.zeros([10]))
    - y = tf.nn.softmax(tf.matmul(x,W) + b) #matmul:行のかけ算をするという指定
    - y_ = tf.placeholder(tf.float32,[None,10])
    - cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y),reduction_indices=[1])) #類似度の計算
    - train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy) #最急降下法
    - init = tf.global_variables_initializer()
    - sess = tf.Session()
    - sess.run(init)
    - for i in range(1000):
      - batch_xs,batch_ys = mnist.train.next_batch(100) #次の100を読み込んで処理せよ
      - sess.run(train_step,feed_dict={x: batch_xs,y_: batch_ys})
    - correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
    - accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    - print(sess.run(accuracy,feed_dict={x: mnist.test.images, y_:mnist.test.labels}))
