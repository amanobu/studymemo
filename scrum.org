* scrum
- 用語
  - ストーリー
    - 要件
    - なんでストーリーって言うんだろう。わかりにくい
    - 機能と【目的】を書く
      - 個人的に目的が重要な気がする
  - スプリント
    - 周期、一定期間のサイクル
      - 大体1週から1ヶ月
      - どうやって決めるのだろう
    - １スプリントでoutputを出す
      - 何かしらの成果物
    - コレにより継続的な価値提供ができる
    - 期間変更ＮＧ。最初に決める
  - ベロシティ
    - 計測
  - プロダクトバックログ
    - ストーリー一覧
    - 優先度がついていて、上から順に優先度が高い
    - 要件と共に見積作業工数が書かれている（見積サイズ）
  - スプリントバックログ
    - そのスプリントで実現するストーリーリスト
    - スプリントの途中で変更ＮＧ
  - プロダクトバックログリファインメント
    - 下記POによるバックログの詳細化と優先順位の調整
  - エピック
    - サイズのでかいストーリー
  - タイムボックス
    - 行事や打ち合わせを行う際の延長できない時間枠
- 登場人物
  - プロダクトオーナー(PO)
    - 損益責任
    - ビジョン
  - スクラムマスター(SM)
    - 阻害要因取り除き
    - scrum学習と適応のサポート
  - TEAM
    - ストーリーの実装
    - 見積・分析
    - なんでもやる。横断的にやる
- 流れ
  - スプリント計画
    - 次のスプリントで何やるか？を決定
      - POとストーリーのどれをやるか決める
      - ストーリーには完了定義(DoD)を書くこと
    - どう実現するか？を
      - 一日以下のタスクに落とし込む
  - デイリースクラム
    - 決まった時間に少しの時間
    - 一人ずつ
      - 昨日何やった
      - 今日何やる
      - 問題点
    - 長引きそうなら別枠で
  - バックログリファインメント
    - ストーリー・タスクの詳細化
    - DoDの定義
    - だいぶ細かい所まで落とす
  - スプリントレビュー
    - スプリント最終日に実施
    - 完成したストーリーのデモ・報告
    - （プロダクトバックログだと思う）の更新
    - ストーリーのDoDの定義を確認しそれが完了している事を確認する
  - 振り返り：スプリントレトロスペクティブ
    - 何をやったか
    - 問題は無かったか
    - もっと改善できないか
      - KPTとか

* scrum を進めるにあたって心がけること
** コミュニケーションが一番大切
「個人との対話」を重視します
http://www.agilemanifesto.org/iso/ja/
一人で抱えることなく少しでも気になる点があれば話し合う

** 変化を受け入れる
「計画に従うよりも変化への対応を」を価値とする
あらかじめ決められていたことなんてどうせ変わるとの意気込みで、変化に柔軟に対応していく
バックログを作ったらそれが決定事項ではなく、随時プロダクトバックログリファインメント・デイリースクラムで見直し、プロジェクトの最新の動向にマッチするようにメンテしていく

** チームで一丸となって進めるようにする
チームが同じ知識レベルになるように気を配る（スクラムマスターが）
→ミーティングは全員で
→ほんの些細な事までチケットなどに残すとか
そうすると、メンバーが横断的にタスクを拾える

** 無駄を出来る限りそぎ落とす
agileという言葉は「俊敏な」とか「ムダのない」という意味です
イテレーションでどんどん無駄をそぎ落として早く進めるようにしよう
無駄をそぎ落とすため、JITな開発プロセスとする必要がある
→全て決まってから動く野ではなく今できる事をする
→余計な機能を盛り込み過ぎない。使わなかったら時間の無駄
これを実現する為に何をすべきという議論は振り返りで行い改善アクションを探る

** 残業に頼らない
8時間/日完全燃焼する事が求められる
ベロシティがあがらないときは何か問題が有るはずなので振り返りで改善アクションを探ったほうが効果的
* その他のメモ
** あるプロジェクトのメモ：サーバ移行
  1. まずこのプロジェクトの最重要指標を決める
     - 何が何でも守らないといけない目標
  2. どんどん隠し球が出てくる。不安になってくる
  3. プロダクトバックログに全てを吐き出した
     - 詳細設計書レベルで
       - 誰が着手しても出来るレベルまで
       - これによりあと何をやらなければならないかという透明性が出た
         - 不安じゃなくなった
       - 短期間の場合これを細かくやるのが良い結果になったとのこと
     - 最重要指標を満たす物か？という事を問い続ける
       - 少しでも不安が有れば、では、不安でなくす為に何をしなければならないかを考える
     - ベロシティを上げるため
       - メンバー自らどうしたら良いか考えるようにさせる
         - 振り返り
         - デイリースクラム
- SMARTな目標
  - Specific
    - 明確な
  - Measurable
    - 計測可能な
  - Attainable
    - 達成可能な
  - Relevant
    - 適切な
  - Timely
    - タイムリーな
** 認定スクラムマスタ研修のメモのメモ
自分は受けてないけど、研修を受けてきた人のメモのメモ
*** 精神編
- スクラムとは、開発フレームワークであり自己組織・自律的組織
- ソフトウェアのためのものではない。プロダクトを作るチームの為の物
- いくつかの開発手法を組み合わせて作られた開発手法から、難しくうまくいかない部分を削除
- アジャイルはスクラムじゃないし、TDDはスクラムじゃない
  - TDDなどは、ユーザー視点ではなく、エンジニア視点で考えられた開発手法であり、スクラムの精神には反している。お客様視点は基本の「き」
- スクラムの精神
  - 個人ではなく、チーム全体で評価・賞賛される
  - チームが成功すれば、個人は関係ない
  - プロダクトが成功すれば、チームは関係ない
  - 会社が成功すれば、プロダクトは関係ない
  - 国が成功すれば、会社は関係ない。では、何が必要？
    - 共通認識が必要
      - 目標と熱意
  - 「ムダ、ムリ、ムラ」をなくすことを目指す
- 条件
  - 全てを共有出来る場が必要
    - 会議とか、カンバンとか、インセプションデッキとか
  - マネージャーは不要
    - 人・もの・お金を管理するのがマネージャーでスクラムには必要ない
  - リーダーは不要。各メンバー自律的に行動するから
  - スーパースターは不要。そのような存在の影響でチームの生産性が落ちるならば不要
- スクラムのコミット
  - スクラムで将来に対してコミットは出来ない
  - スケジュールを守ることは出来ない
  - できる事は実施中のスプリントのみ
  - チームの決め事
  - 日付のコミットは出来ないがチームは常に最善を尽くす
    - そのような精神だから
- スクラムと開発手法
  - メンバー同士のコミニュケーションを密に行う
    - そのためには十分の会話
    - 1on1
    - その会話の分、ドキュメントは減らせる
      - え？ほんと？
        - ドキュメントを残すことで提供したいvalueにつながっていますか？という事らしい
  - 必要なのは予測や見積もりではなく、計測
    - 予測は手間をかければ精度は上がるけど100%になる？ならないよね
      - なのでそこに時間をかける事は無駄という考え方
    - 本当に使われるのかを必ず「計測」する
    - もっと価値のある物へ労力を裂くこと！
  - 断る事
    - プロダクトのことを一番知っているのは誰か→開発者（チーム）
      - 開発者が無理って言ったことは無理
        - もしそれを覆そうとする理由を提示出来るのか？
- プロダクトやサービスが続く限り、カイゼンのプロセスは継続して行なわれるので、スクラムが終わることはない
- 障害（不具合）対応の考え方
  - 今すぐ に修正する！
    - スクラムのカイゼンプロセスに影響をあたえているトヨタ（トヨタ生産方式）も生産ラインに問題があるとすぐに生産ラインを停止して、問題を解消しているらしい
    - 今この瞬間に直さないから溜まっていく
      - 溜まっていくと一つのバグを直すと２つバグが出る状態になる→リファクタの時間
*** 手法編
- チームメンバー
  - 3～9人
  - 奇数人数の方が最終的な多数決の時に良い
  - でも7～9は多い
  - 女性の方が問題解決能力は高いので、チームメンバーに入れた方がいい
  - 優れたスクラムチームでも、50％ぐらいの問題は発生する
    - それをカイゼンしていく。逆に、カイゼンする問題がないのはスクラムではない
- スプリント
  - 優先順位付けされたバックログを上から消化していく期間
    - 全てを優先度が高いとしない！
      - もしそうであれば優先度をつけるという仕事を放棄している
  - 基本的には、1スプリントは2週間から4週間
  - 2週間を1スプリントにするのがメジャー
    - だけど、3週間にすると振り返り・計画の回数とか減らせて、いいかも知れない。
  - スプリント完了後のベロシティ±20％の消化率であれば、開発プロセスはある程度問題無い
    - −20％が3回続いた場合は、何か問題があるだろう
  - スプリントの停止
    - プロダクトオーナーだけが、スプリントの停止を唯一行える
    - 緊急手順。重要顧客からの突然の依頼。重クレーム対応
- ベロシティ
  - 1スプリントで消化するポイント
  - 人月ではなくタスクの相対値
  - 見積もりは過去のスプリントから計測した値を採用する
    - チームの最初はどうするのだろうか？
- バーンダウンチャート
  - バックログの消化状況のグラフ
  - 予測と実測値があるとよい
  - 注
    - リリース日があらかじめ決められた場合は期日に間に合うように色々省いてしまう。良くない
    - テストやリファクタリングとかを
- 役割
  - PO
    - プロダクトの責任を持つ人
    - プロジェクトのビジョンを持っている人
    - 何かチームが困ったとき気軽に相談できる場所にいて、気軽に相談できる人
    - 一人
      - なぜ一人が良いのかはわからない...
    - 必ず全てに優先順位を
    - 最終的な仕様にすべての権限と責任を持つ
      - チームの成果物がPOの想定と違うものが出てきたときにPOが説明できていなかったから
        - チームの責任ではない
  - SM
    - チームの障害となっている事や、チームで解決出来ない事を取り除く人
      - いろんな問題を解決する為政治力も必要となる
    - 外部からチームを守る人
    - SMとPOは兼任できる
    - 理想的なSM
      - https://www.youtube.com/watch?v=nBrYvX5MojQ
        - 責任をもって秩序を守るひとが必要
        - 決して和を乱さず、むしろ率先して和を尊ぶこと
        - 秩序を守ることで、秩序が守られ続ける
    - タイムボックスを守る
    - やってはいけないこと
      - チームのやり方に口をだすこと
      - POの責任範囲を奪うこと
  - メンバー
    - プロジェクト開発へのベストを尽くす
    - チーム全体で
      - チーム内に全ての機能を持つ
        - 誰が実施しても良い状態に
    - 役割を変更しながら、フラットな状態で進めていく
    - チームの為なら何でもする
    - メンバーを変更した場合、チームの生産性が25％低下する
    - 高いコミュミケーションと継続的なチームメンバー構成（チームの安定）から暗黙値を共有する
    - 【許可とか求めるより、謝罪したほうが楽だから、相当クリティカルじゃない限り、許可とりにこなくていいよ】の考え方
- 儀式
  - スプリント計画
    - 3~6ヶ月のバックログを作成する
      - 2～3スプリントで取り組める内容
      - 優先順位を決める
    - ベロシティの見積もりを過去の状況から
    - 計画はスプリント内の5％（２時間から４時間）で実施
  - スプリントの振り返り
    - スプリントの完了後振り返り
    - 障害リストとともに改善内容を確認
  - スプリントレビュー
    - POに動くアプリをみせ、必ず開発チームが説明
  - デイリースクラム（朝会）
    - やったこと、やること、問題点の共有
      - 目的は共有
    - Doneは本当に完了した時にしか言う事はできない
  - バックログリファインメント
    - 内容を詳細につめ、スプリント実施できるようにする
  - 全体レビュー
    - 投資対効果を計るのは難しい
    - 幸福度を計る事にしよう
      - 幸福度とは何に価値を置くか
    - まじっすか。幸福度ですか
- 生成物
  - プロダクトバックログ
  - スプリントバックログ
    - そのスプリントで消化するもの
    - 優先順位は変更して良い
  - 開発増分
  - 障害リスト
    - プロダクトの障害と開発プロセスの障害がある
    - 開発プロセスの障害はスプリントの振り返りで確認し、以降のスプリントでSMが改善をおこなう
    - 一般的な問題は扱わない
      - 給料が低いとか
*** その他
- 身を切る人、責任範囲の人以外は口を出さない
- 組織の記憶喪失
  - チームのメンバーが変わることで、チーム内の暗黙知やナレッジが失われること
  - スクラムではチームを変えるのはご法度
    - ウムムム....
- 資格をとるよりもシゴトや人生を変えていくことが大事だよ
- 「チームに」必要な技術を「チームで」学ぶ
- リリース日をコミットするという言うこと
  - 品質、機能、チームの士気を減らしてでもリリース日を守ることに意味は有るのか
    - 対外であればメンツ、契約などもあろう
